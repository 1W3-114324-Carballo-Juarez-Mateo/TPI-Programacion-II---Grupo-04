// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebApi_TPI_AIRCNR_PII.Models;

public partial class AlquileresContext : DbContext
{
    public AlquileresContext(DbContextOptions<AlquileresContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Alquiler> Alquileres { get; set; }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Contacto> Contactos { get; set; }

    public virtual DbSet<Empleado> Empleados { get; set; }

    public virtual DbSet<Estados_Alquiler> Estados_Alquileres { get; set; }

    public virtual DbSet<Estados_Vehiculo> Estados_Vehiculos { get; set; }

    public virtual DbSet<Localidad> Localidades { get; set; }

    public virtual DbSet<Marca> Marcas { get; set; }

    public virtual DbSet<Provincia> Provincias { get; set; }

    public virtual DbSet<Sucursal> Sucursales { get; set; }

    public virtual DbSet<Tipos_Contacto> Tipos_Contactos { get; set; }

    public virtual DbSet<Tipos_Documento> Tipos_Documentos { get; set; }

    public virtual DbSet<Tipos_Vehiculo> Tipos_Vehiculos { get; set; }

    public virtual DbSet<Usuarios_Empleado> Usuarios_Empleados { get; set; }

    public virtual DbSet<Vehiculo> Vehiculos { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Alquiler>(entity =>
        {
            entity.HasKey(e => e.id_alquiler);

            entity.Property(e => e.fecha_fin).HasColumnType("datetime");
            entity.Property(e => e.fecha_inicio).HasColumnType("datetime");
            entity.Property(e => e.monto).HasColumnType("decimal(12, 2)");

            entity.HasOne(d => d.id_clienteNavigation).WithMany(p => p.Alquileres)
                .HasForeignKey(d => d.id_cliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Alquileres_Clientes");

            entity.HasOne(d => d.id_estado_alquilerNavigation).WithMany(p => p.Alquileres)
                .HasForeignKey(d => d.id_estado_alquiler)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Alquileres_Estados_Alquileres");

            entity.HasOne(d => d.id_sucursalNavigation).WithMany(p => p.Alquileres)
                .HasForeignKey(d => d.id_sucursal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Alquileres_Sucursales");

            entity.HasOne(d => d.id_vehiculoNavigation).WithMany(p => p.Alquileres)
                .HasForeignKey(d => d.id_vehiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Alquileres_Vehiculos");
        });

        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.id_barrio);

            entity.Property(e => e.barrio1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("barrio");

            entity.HasOne(d => d.id_localidadNavigation).WithMany(p => p.Barrios)
                .HasForeignKey(d => d.id_localidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Barrios_Localidades");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.id_cliente);

            entity.Property(e => e.documento)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.id_tipo_documentoNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.id_tipo_documento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Clientes_Tipos_Documentos");
        });

        modelBuilder.Entity<Contacto>(entity =>
        {
            entity.HasKey(e => e.id_contacto);

            entity.Property(e => e.contacto1)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("contacto");

            entity.HasOne(d => d.id_clienteNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.id_cliente)
                .HasConstraintName("FK_Contactos_Clientes");

            entity.HasOne(d => d.id_tipo_contactoNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.id_tipo_contacto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contactos_Tipos_Contactos");
        });

        modelBuilder.Entity<Empleado>(entity =>
        {
            entity.HasKey(e => e.id_empleado);

            entity.Property(e => e.documento)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.id_sucursalNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.id_sucursal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Empleados_Sucursales");

            entity.HasOne(d => d.id_tipo_documentoNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.id_tipo_documento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Empleados_Tipos_Documentos");

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.Empleados)
                .HasForeignKey(d => d.id_usuario)
                .HasConstraintName("FK_Empleados_Usuarios_Empleados");
        });

        modelBuilder.Entity<Estados_Alquiler>(entity =>
        {
            entity.HasKey(e => e.id_estado_alquiler);

            entity.Property(e => e.estado)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Estados_Vehiculo>(entity =>
        {
            entity.HasKey(e => e.id_estado_vehiculo);

            entity.Property(e => e.estado_vehiculo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Localidad>(entity =>
        {
            entity.HasKey(e => e.id_localidad);

            entity.Property(e => e.localidad)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.id_provinciaNavigation).WithMany(p => p.Localidades)
                .HasForeignKey(d => d.id_provincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Localidades_Provincias");
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.HasKey(e => e.id_marca);

            entity.Property(e => e.marca1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("marca");
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.id_provincia).HasName("PK_Provinces");

            entity.Property(e => e.provincia1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("provincia");
        });

        modelBuilder.Entity<Sucursal>(entity =>
        {
            entity.HasKey(e => e.id_sucursal);

            entity.Property(e => e.descripcion)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.id_barrioNavigation).WithMany(p => p.Sucursales)
                .HasForeignKey(d => d.id_barrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sucursales_Barrios");
        });

        modelBuilder.Entity<Tipos_Contacto>(entity =>
        {
            entity.HasKey(e => e.id_tipo_contacto);

            entity.Property(e => e.tipo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tipos_Documento>(entity =>
        {
            entity.HasKey(e => e.id_tipo_documento);

            entity.Property(e => e.tipo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tipos_Vehiculo>(entity =>
        {
            entity.HasKey(e => e.id_tipo_vehiculo);

            entity.Property(e => e.tipo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Usuarios_Empleado>(entity =>
        {
            entity.HasKey(e => e.id_usuario);

            entity.Property(e => e.contraseña)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.usuario)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Vehiculo>(entity =>
        {
            entity.HasKey(e => e.id_vehiculo);

            entity.Property(e => e.modelo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.patente)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.valor_tasado).HasColumnType("decimal(12, 2)");

            entity.HasOne(d => d.id_estado_vehiculoNavigation).WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.id_estado_vehiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehiculos_Estados_Vehiculos");

            entity.HasOne(d => d.id_marcaNavigation).WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.id_marca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehiculos_Marcas");

            entity.HasOne(d => d.id_sucursalNavigation).WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.id_sucursal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehiculos_Sucursales");

            entity.HasOne(d => d.id_tipo_vehiculoNavigation).WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.id_tipo_vehiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehiculos_Tipos_Vehiculos");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}